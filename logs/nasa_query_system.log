2025-08-02 14:15:56,276 - src.models.llm_manager - INFO - OpenAI provider initialized
2025-08-02 14:15:56,298 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-08-02 14:15:56,298 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: sentence-transformers/all-MiniLM-L6-v2
2025-08-02 14:15:57,799 - src.kb.fact_store - INFO - Loaded 12 facts from data/kb/facts.json
2025-08-02 14:15:57,802 - src.kb.knowledge_base - INFO - Loaded 12 NASA facts into knowledge base
2025-08-02 14:15:57,814 - neo4j_graphrag.indexes - INFO - Creating vector index named 'text_embeddings'
2025-08-02 14:15:58,927 - src.kg.neo4j_knowledge_graph - INFO - Vector index 'text_embeddings' created successfully
2025-08-02 14:15:59,199 - src.kg.neo4j_knowledge_graph - INFO - GraphRAG initialized successfully
2025-08-02 14:15:59,200 - src.kg.neo4j_knowledge_graph - INFO - Neo4j Knowledge Graph initialized
2025-08-02 14:15:59,767 - src.rag.pinecone_rag_system - INFO - Using existing Pinecone index: nasa-docs
2025-08-02 14:15:59,937 - src.rag.pinecone_rag_system - INFO - Pinecone RAG System initialized
2025-08-02 14:15:59,937 - __main__ - INFO - Pinecone RAG system initialized
2025-08-02 14:15:59,961 - neo4j_graphrag.indexes - INFO - Creating vector index named 'text_embeddings'
2025-08-02 14:16:00,514 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX text_embeddings IF NOT EXISTS FOR (e:Chunk) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: toInteger($dimensions), `vector.similarity_function`: $similarity_fn}}` has no effect.} {description: `VECTOR INDEX text_embeddings FOR (e:Chunk) ON (e.embedding)` already exists.} {position: None} for query: 'CREATE VECTOR INDEX $name IF NOT EXISTS FOR (n:Chunk) ON n.embedding OPTIONS { indexConfig: { `vector.dimensions`: toInteger($dimensions), `vector.similarity_function`: $similarity_fn } }'
2025-08-02 14:16:00,564 - src.ingestion.hybrid_ingestion_pipeline - INFO - Vector index 'text_embeddings' created successfully
2025-08-02 14:16:00,574 - src.models.llm_manager - INFO - OpenAI provider initialized
2025-08-02 14:16:00,776 - src.rag.pinecone_rag_system - INFO - Using existing Pinecone index: nasa-docs
2025-08-02 14:16:00,777 - src.rag.pinecone_rag_system - INFO - Pinecone RAG System initialized
2025-08-02 14:16:00,777 - src.ingestion.hybrid_ingestion_pipeline - INFO - Pinecone RAG system initialized for hybrid ingestion
2025-08-02 14:16:00,777 - src.ingestion.hybrid_ingestion_pipeline - INFO - Document processor initialized
2025-08-02 14:16:00,778 - src.ingestion.hybrid_ingestion_pipeline - INFO - Loaded metadata for 7 files
2025-08-02 14:16:00,782 - src.ingestion.hybrid_ingestion_pipeline - INFO - File unchanged: apollo_mission.txt
2025-08-02 14:16:00,783 - src.ingestion.hybrid_ingestion_pipeline - INFO - File unchanged: nasa_mars_exploration.pdf
2025-08-02 14:16:00,784 - src.ingestion.hybrid_ingestion_pipeline - INFO - File unchanged: exoplanet_detection_methods.pdf
2025-08-02 14:16:00,784 - src.ingestion.hybrid_ingestion_pipeline - INFO - File unchanged: hubble_space_telescope.pdf
2025-08-02 14:16:00,784 - src.ingestion.hybrid_ingestion_pipeline - INFO - File unchanged: voyager_program.pdf
2025-08-02 14:16:00,784 - src.ingestion.hybrid_ingestion_pipeline - INFO - File unchanged: nasa_initial_knowledge.pdf
2025-08-02 14:16:00,785 - src.ingestion.hybrid_ingestion_pipeline - INFO - File unchanged: ion_propulsion_technology.pdf
2025-08-02 14:16:00,785 - src.ingestion.hybrid_ingestion_pipeline - INFO - No files to process. 7 files unchanged.
2025-08-02 14:16:29,254 - src.models.llm_manager - INFO - OpenAI provider initialized
2025-08-02 14:16:29,265 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-08-02 14:16:29,265 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: sentence-transformers/all-MiniLM-L6-v2
2025-08-02 14:16:30,806 - src.kb.fact_store - INFO - Loaded 12 facts from data/kb/facts.json
2025-08-02 14:16:30,808 - src.kb.knowledge_base - INFO - Loaded 12 NASA facts into knowledge base
2025-08-02 14:16:30,819 - neo4j_graphrag.indexes - INFO - Creating vector index named 'text_embeddings'
2025-08-02 14:16:31,329 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX text_embeddings IF NOT EXISTS FOR (e:Chunk) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: toInteger($dimensions), `vector.similarity_function`: $similarity_fn}}` has no effect.} {description: `VECTOR INDEX text_embeddings FOR (e:Chunk) ON (e.embedding)` already exists.} {position: None} for query: 'CREATE VECTOR INDEX $name IF NOT EXISTS FOR (n:Chunk) ON n.embedding OPTIONS { indexConfig: { `vector.dimensions`: toInteger($dimensions), `vector.similarity_function`: $similarity_fn } }'
2025-08-02 14:16:31,376 - src.kg.neo4j_knowledge_graph - INFO - Vector index 'text_embeddings' created successfully
2025-08-02 14:16:31,602 - src.kg.neo4j_knowledge_graph - INFO - GraphRAG initialized successfully
2025-08-02 14:16:31,603 - src.kg.neo4j_knowledge_graph - INFO - Neo4j Knowledge Graph initialized
2025-08-02 14:16:32,042 - src.rag.pinecone_rag_system - INFO - Using existing Pinecone index: nasa-docs
2025-08-02 14:16:32,206 - src.rag.pinecone_rag_system - INFO - Pinecone RAG System initialized
2025-08-02 14:16:32,207 - __main__ - INFO - Pinecone RAG system initialized
2025-08-02 14:16:32,232 - neo4j_graphrag.indexes - INFO - Creating vector index named 'text_embeddings'
2025-08-02 14:16:32,738 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX text_embeddings IF NOT EXISTS FOR (e:Chunk) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: toInteger($dimensions), `vector.similarity_function`: $similarity_fn}}` has no effect.} {description: `VECTOR INDEX text_embeddings FOR (e:Chunk) ON (e.embedding)` already exists.} {position: None} for query: 'CREATE VECTOR INDEX $name IF NOT EXISTS FOR (n:Chunk) ON n.embedding OPTIONS { indexConfig: { `vector.dimensions`: toInteger($dimensions), `vector.similarity_function`: $similarity_fn } }'
2025-08-02 14:16:32,784 - src.ingestion.hybrid_ingestion_pipeline - INFO - Vector index 'text_embeddings' created successfully
2025-08-02 14:16:32,794 - src.models.llm_manager - INFO - OpenAI provider initialized
2025-08-02 14:16:33,021 - src.rag.pinecone_rag_system - INFO - Using existing Pinecone index: nasa-docs
2025-08-02 14:16:33,022 - src.rag.pinecone_rag_system - INFO - Pinecone RAG System initialized
2025-08-02 14:16:33,022 - src.ingestion.hybrid_ingestion_pipeline - INFO - Pinecone RAG system initialized for hybrid ingestion
2025-08-02 14:16:33,022 - src.ingestion.hybrid_ingestion_pipeline - INFO - Document processor initialized
2025-08-02 14:16:33,022 - src.ingestion.hybrid_ingestion_pipeline - INFO - No existing file metadata found
2025-08-02 14:16:33,026 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: apollo_mission.txt
2025-08-02 14:16:33,026 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: nasa_mars_exploration.pdf
2025-08-02 14:16:33,026 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: exoplanet_detection_methods.pdf
2025-08-02 14:16:33,026 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: hubble_space_telescope.pdf
2025-08-02 14:16:33,026 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: voyager_program.pdf
2025-08-02 14:16:33,027 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: nasa_initial_knowledge.pdf
2025-08-02 14:16:33,027 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: ion_propulsion_technology.pdf
2025-08-02 14:16:33,027 - src.ingestion.hybrid_ingestion_pipeline - INFO - Found 7 files to process (changed/new)
2025-08-02 14:16:33,027 - src.ingestion.hybrid_ingestion_pipeline - INFO - Skipping 0 unchanged files
2025-08-02 14:16:33,027 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: apollo_mission.txt
2025-08-02 14:16:33,027 - src.ingestion.hybrid_ingestion_pipeline - INFO - Processing file with Neo4j: data/documents/apollo_mission.txt
2025-08-02 14:16:33,027 - src.ingestion.hybrid_ingestion_pipeline - INFO - Extracted content length: 1559 characters
2025-08-02 14:16:33,027 - src.ingestion.hybrid_ingestion_pipeline - INFO - Creating KG Builder for apollo_mission.txt with from_pdf=False
2025-08-02 14:16:33,133 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x17cc177d0> with run_params={'schema': {'node_types': ['mission', 'spacecraft', 'rover', 'orbiter', 'lander', '... (22 items)'], 'relationship_types': ['MANAGES', 'OPERATES', 'BUILT', 'LAUNCHED_FROM', 'STUDIES', '... (16 items)'], 'patterns': None}, 'splitter': {'text': 'Apollo 11 Mission\n\nThe Apollo 11 mission was the first human spaceflight to land on the Moon. Launched on July 16, 1969 from Kennedy Space Center, the mission was managed by NASA and involved three as... (1359 chars)'}}
2025-08-02 14:16:33,469 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:16:33,842 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:16:34,133 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:16:34,400 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:16:34,405 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2025-08-02 14:16:39,962 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:16:42,258 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:16:49,295 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:16:52,314 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:16:54,068 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (end))} {position: line: 1, column: 21, offset: 20} for query: 'UNWIND $rows as row MATCH (start:__KGBuilder__ {__tmp_internal_id: row.start_node_id}),       (end:__KGBuilder__ {__tmp_internal_id: row.end_node_id}) WITH start, end, row CALL apoc.merge.relationship(start, row.type, {}, row.properties, end, row.properties) YIELD rel  WITH rel, row CALL (rel,row) {  WITH rel, row WHERE row.embedding_properties IS NOT NULL UNWIND keys(row.embedding_properties) as emb CALL db.create.setRelationshipVectorProperty(rel, emb, row.embedding_properties[emb]) } RETURN elementId(rel)'
2025-08-02 14:16:55,007 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:16:55,349 - src.rag.pinecone_rag_system - INFO - Deleted 5 existing vectors for document apollo_mission to prevent duplicates
2025-08-02 14:16:55,618 - src.rag.pinecone_rag_system - INFO - Upserted 5 vectors to Pinecone for apollo_mission (duplicates removed)
2025-08-02 14:16:55,618 - src.rag.pinecone_rag_system - INFO - Successfully added document apollo_mission to Pinecone
2025-08-02 14:16:55,619 - src.ingestion.hybrid_ingestion_pipeline - INFO - Added document to RAG vector store: 1 estimated chunks
2025-08-02 14:16:55,619 - src.ingestion.hybrid_ingestion_pipeline - INFO - Neo4j processing completed: added to KG, 1 RAG chunks
2025-08-02 14:16:55,621 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: nasa_mars_exploration.pdf
2025-08-02 14:16:55,622 - src.ingestion.hybrid_ingestion_pipeline - INFO - Processing file with Neo4j: data/documents/nasa_mars_exploration.pdf
2025-08-02 14:16:55,635 - src.ingestion.hybrid_ingestion_pipeline - INFO - Extracted content length: 1627 characters
2025-08-02 14:16:55,636 - src.ingestion.hybrid_ingestion_pipeline - INFO - Creating KG Builder for nasa_mars_exploration.pdf with from_pdf=True
2025-08-02 14:16:55,757 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x17cce7020> with run_params={'schema': {'node_types': ['mission', 'spacecraft', 'rover', 'orbiter', 'lander', '... (22 items)'], 'relationship_types': ['MANAGES', 'OPERATES', 'BUILT', 'LAUNCHED_FROM', 'STUDIES', '... (16 items)'], 'patterns': None}, 'pdf_loader': {'filepath': 'data/documents/nasa_mars_exploration.pdf'}}
2025-08-02 14:16:56,114 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:16:56,482 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:16:56,773 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:16:57,245 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:17:03,939 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:17:04,453 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:17:05,147 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:17:05,345 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:17:05,659 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` has no effect.} {description: `RANGE INDEX __entity__tmp_internal_id FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` already exists.} {position: None} for query: '\n        CREATE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (n:__KGBuilder__) ON (n.__tmp_internal_id)\n        '
2025-08-02 14:17:06,531 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (end))} {position: line: 1, column: 21, offset: 20} for query: 'UNWIND $rows as row MATCH (start:__KGBuilder__ {__tmp_internal_id: row.start_node_id}),       (end:__KGBuilder__ {__tmp_internal_id: row.end_node_id}) WITH start, end, row CALL apoc.merge.relationship(start, row.type, {}, row.properties, end, row.properties) YIELD rel  WITH rel, row CALL (rel,row) {  WITH rel, row WHERE row.embedding_properties IS NOT NULL UNWIND keys(row.embedding_properties) as emb CALL db.create.setRelationshipVectorProperty(rel, emb, row.embedding_properties[emb]) } RETURN elementId(rel)'
2025-08-02 14:17:07,160 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:17:07,272 - src.rag.pinecone_rag_system - INFO - Deleted 4 existing vectors for document nasa_mars_exploration to prevent duplicates
2025-08-02 14:17:07,415 - src.rag.pinecone_rag_system - INFO - Upserted 4 vectors to Pinecone for nasa_mars_exploration (duplicates removed)
2025-08-02 14:17:07,415 - src.rag.pinecone_rag_system - INFO - Successfully added document nasa_mars_exploration to Pinecone
2025-08-02 14:17:07,415 - src.ingestion.hybrid_ingestion_pipeline - INFO - Added document to RAG vector store: 1 estimated chunks
2025-08-02 14:17:07,416 - src.ingestion.hybrid_ingestion_pipeline - INFO - Neo4j processing completed: added to KG, 1 RAG chunks
2025-08-02 14:17:07,417 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: exoplanet_detection_methods.pdf
2025-08-02 14:17:07,417 - src.ingestion.hybrid_ingestion_pipeline - INFO - Processing file with Neo4j: data/documents/exoplanet_detection_methods.pdf
2025-08-02 14:17:07,429 - src.ingestion.hybrid_ingestion_pipeline - INFO - Extracted content length: 1996 characters
2025-08-02 14:17:07,429 - src.ingestion.hybrid_ingestion_pipeline - INFO - Creating KG Builder for exoplanet_detection_methods.pdf with from_pdf=True
2025-08-02 14:17:07,552 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x16f68f5c0> with run_params={'schema': {'node_types': ['mission', 'spacecraft', 'rover', 'orbiter', 'lander', '... (22 items)'], 'relationship_types': ['MANAGES', 'OPERATES', 'BUILT', 'LAUNCHED_FROM', 'STUDIES', '... (16 items)'], 'patterns': None}, 'pdf_loader': {'filepath': 'data/documents/exoplanet_detection_methods.pdf'}}
2025-08-02 14:17:07,813 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:17:08,013 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:17:08,136 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:17:08,307 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:17:08,453 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:17:12,913 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:17:13,323 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:17:14,976 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:17:15,557 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:17:15,828 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:17:16,173 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` has no effect.} {description: `RANGE INDEX __entity__tmp_internal_id FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` already exists.} {position: None} for query: '\n        CREATE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (n:__KGBuilder__) ON (n.__tmp_internal_id)\n        '
2025-08-02 14:17:16,999 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (end))} {position: line: 1, column: 21, offset: 20} for query: 'UNWIND $rows as row MATCH (start:__KGBuilder__ {__tmp_internal_id: row.start_node_id}),       (end:__KGBuilder__ {__tmp_internal_id: row.end_node_id}) WITH start, end, row CALL apoc.merge.relationship(start, row.type, {}, row.properties, end, row.properties) YIELD rel  WITH rel, row CALL (rel,row) {  WITH rel, row WHERE row.embedding_properties IS NOT NULL UNWIND keys(row.embedding_properties) as emb CALL db.create.setRelationshipVectorProperty(rel, emb, row.embedding_properties[emb]) } RETURN elementId(rel)'
2025-08-02 14:17:17,799 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:17:17,903 - src.rag.pinecone_rag_system - INFO - Deleted 5 existing vectors for document exoplanet_detection_methods to prevent duplicates
2025-08-02 14:17:18,044 - src.rag.pinecone_rag_system - INFO - Upserted 5 vectors to Pinecone for exoplanet_detection_methods (duplicates removed)
2025-08-02 14:17:18,045 - src.rag.pinecone_rag_system - INFO - Successfully added document exoplanet_detection_methods to Pinecone
2025-08-02 14:17:18,045 - src.ingestion.hybrid_ingestion_pipeline - INFO - Added document to RAG vector store: 1 estimated chunks
2025-08-02 14:17:18,045 - src.ingestion.hybrid_ingestion_pipeline - INFO - Neo4j processing completed: added to KG, 1 RAG chunks
2025-08-02 14:17:18,047 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: hubble_space_telescope.pdf
2025-08-02 14:17:18,047 - src.ingestion.hybrid_ingestion_pipeline - INFO - Processing file with Neo4j: data/documents/hubble_space_telescope.pdf
2025-08-02 14:17:18,058 - src.ingestion.hybrid_ingestion_pipeline - INFO - Extracted content length: 1919 characters
2025-08-02 14:17:18,058 - src.ingestion.hybrid_ingestion_pipeline - INFO - Creating KG Builder for hubble_space_telescope.pdf with from_pdf=True
2025-08-02 14:17:18,167 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x16bea9280> with run_params={'schema': {'node_types': ['mission', 'spacecraft', 'rover', 'orbiter', 'lander', '... (22 items)'], 'relationship_types': ['MANAGES', 'OPERATES', 'BUILT', 'LAUNCHED_FROM', 'STUDIES', '... (16 items)'], 'patterns': None}, 'pdf_loader': {'filepath': 'data/documents/hubble_space_telescope.pdf'}}
2025-08-02 14:17:18,376 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:17:18,529 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:17:18,687 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:17:19,110 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:17:19,408 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:17:26,467 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:17:26,911 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:17:27,727 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:17:29,803 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:17:30,235 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:17:30,565 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` has no effect.} {description: `RANGE INDEX __entity__tmp_internal_id FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` already exists.} {position: None} for query: '\n        CREATE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (n:__KGBuilder__) ON (n.__tmp_internal_id)\n        '
2025-08-02 14:17:31,249 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (end))} {position: line: 1, column: 21, offset: 20} for query: 'UNWIND $rows as row MATCH (start:__KGBuilder__ {__tmp_internal_id: row.start_node_id}),       (end:__KGBuilder__ {__tmp_internal_id: row.end_node_id}) WITH start, end, row CALL apoc.merge.relationship(start, row.type, {}, row.properties, end, row.properties) YIELD rel  WITH rel, row CALL (rel,row) {  WITH rel, row WHERE row.embedding_properties IS NOT NULL UNWIND keys(row.embedding_properties) as emb CALL db.create.setRelationshipVectorProperty(rel, emb, row.embedding_properties[emb]) } RETURN elementId(rel)'
2025-08-02 14:17:31,942 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:17:32,065 - src.rag.pinecone_rag_system - INFO - Deleted 5 existing vectors for document hubble_space_telescope to prevent duplicates
2025-08-02 14:17:32,218 - src.rag.pinecone_rag_system - INFO - Upserted 5 vectors to Pinecone for hubble_space_telescope (duplicates removed)
2025-08-02 14:17:32,219 - src.rag.pinecone_rag_system - INFO - Successfully added document hubble_space_telescope to Pinecone
2025-08-02 14:17:32,219 - src.ingestion.hybrid_ingestion_pipeline - INFO - Added document to RAG vector store: 1 estimated chunks
2025-08-02 14:17:32,220 - src.ingestion.hybrid_ingestion_pipeline - INFO - Neo4j processing completed: added to KG, 1 RAG chunks
2025-08-02 14:17:32,221 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: voyager_program.pdf
2025-08-02 14:17:32,222 - src.ingestion.hybrid_ingestion_pipeline - INFO - Processing file with Neo4j: data/documents/voyager_program.pdf
2025-08-02 14:17:32,235 - src.ingestion.hybrid_ingestion_pipeline - INFO - Extracted content length: 1630 characters
2025-08-02 14:17:32,236 - src.ingestion.hybrid_ingestion_pipeline - INFO - Creating KG Builder for voyager_program.pdf with from_pdf=True
2025-08-02 14:17:32,340 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x17cc33b60> with run_params={'schema': {'node_types': ['mission', 'spacecraft', 'rover', 'orbiter', 'lander', '... (22 items)'], 'relationship_types': ['MANAGES', 'OPERATES', 'BUILT', 'LAUNCHED_FROM', 'STUDIES', '... (16 items)'], 'patterns': None}, 'pdf_loader': {'filepath': 'data/documents/voyager_program.pdf'}}
2025-08-02 14:17:32,609 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:17:32,755 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:17:32,994 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:17:33,143 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:17:38,308 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:17:42,644 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:17:44,681 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:17:46,853 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:17:47,185 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` has no effect.} {description: `RANGE INDEX __entity__tmp_internal_id FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` already exists.} {position: None} for query: '\n        CREATE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (n:__KGBuilder__) ON (n.__tmp_internal_id)\n        '
2025-08-02 14:17:47,966 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (end))} {position: line: 1, column: 21, offset: 20} for query: 'UNWIND $rows as row MATCH (start:__KGBuilder__ {__tmp_internal_id: row.start_node_id}),       (end:__KGBuilder__ {__tmp_internal_id: row.end_node_id}) WITH start, end, row CALL apoc.merge.relationship(start, row.type, {}, row.properties, end, row.properties) YIELD rel  WITH rel, row CALL (rel,row) {  WITH rel, row WHERE row.embedding_properties IS NOT NULL UNWIND keys(row.embedding_properties) as emb CALL db.create.setRelationshipVectorProperty(rel, emb, row.embedding_properties[emb]) } RETURN elementId(rel)'
2025-08-02 14:17:48,788 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:17:48,932 - src.rag.pinecone_rag_system - INFO - Deleted 4 existing vectors for document voyager_program to prevent duplicates
2025-08-02 14:17:49,046 - src.rag.pinecone_rag_system - INFO - Upserted 4 vectors to Pinecone for voyager_program (duplicates removed)
2025-08-02 14:17:49,046 - src.rag.pinecone_rag_system - INFO - Successfully added document voyager_program to Pinecone
2025-08-02 14:17:49,047 - src.ingestion.hybrid_ingestion_pipeline - INFO - Added document to RAG vector store: 1 estimated chunks
2025-08-02 14:17:49,047 - src.ingestion.hybrid_ingestion_pipeline - INFO - Neo4j processing completed: added to KG, 1 RAG chunks
2025-08-02 14:17:49,047 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: nasa_initial_knowledge.pdf
2025-08-02 14:17:49,047 - src.ingestion.hybrid_ingestion_pipeline - INFO - Processing file with Neo4j: data/documents/nasa_initial_knowledge.pdf
2025-08-02 14:17:49,052 - src.ingestion.hybrid_ingestion_pipeline - INFO - Extracted content length: 2 characters
2025-08-02 14:17:49,052 - src.ingestion.hybrid_ingestion_pipeline - INFO - Creating KG Builder for nasa_initial_knowledge.pdf with from_pdf=True
2025-08-02 14:17:49,159 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x16bea9a00> with run_params={'schema': {'node_types': ['mission', 'spacecraft', 'rover', 'orbiter', 'lander', '... (22 items)'], 'relationship_types': ['MANAGES', 'OPERATES', 'BUILT', 'LAUNCHED_FROM', 'STUDIES', '... (16 items)'], 'patterns': None}, 'pdf_loader': {'filepath': 'data/documents/nasa_initial_knowledge.pdf'}}
2025-08-02 14:17:49,419 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:17:50,409 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:17:50,476 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` has no effect.} {description: `RANGE INDEX __entity__tmp_internal_id FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` already exists.} {position: None} for query: '\n        CREATE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (n:__KGBuilder__) ON (n.__tmp_internal_id)\n        '
2025-08-02 14:17:50,830 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (end))} {position: line: 1, column: 21, offset: 20} for query: 'UNWIND $rows as row MATCH (start:__KGBuilder__ {__tmp_internal_id: row.start_node_id}),       (end:__KGBuilder__ {__tmp_internal_id: row.end_node_id}) WITH start, end, row CALL apoc.merge.relationship(start, row.type, {}, row.properties, end, row.properties) YIELD rel  WITH rel, row CALL (rel,row) {  WITH rel, row WHERE row.embedding_properties IS NOT NULL UNWIND keys(row.embedding_properties) as emb CALL db.create.setRelationshipVectorProperty(rel, emb, row.embedding_properties[emb]) } RETURN elementId(rel)'
2025-08-02 14:17:51,231 - src.rag.pinecone_rag_system - INFO - Upserted 0 vectors to Pinecone for nasa_initial_knowledge (duplicates removed)
2025-08-02 14:17:51,232 - src.rag.pinecone_rag_system - INFO - Successfully added document nasa_initial_knowledge to Pinecone
2025-08-02 14:17:51,232 - src.ingestion.hybrid_ingestion_pipeline - INFO - Added document to RAG vector store: 1 estimated chunks
2025-08-02 14:17:51,232 - src.ingestion.hybrid_ingestion_pipeline - INFO - Neo4j processing completed: added to KG, 1 RAG chunks
2025-08-02 14:17:51,233 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: ion_propulsion_technology.pdf
2025-08-02 14:17:51,233 - src.ingestion.hybrid_ingestion_pipeline - INFO - Processing file with Neo4j: data/documents/ion_propulsion_technology.pdf
2025-08-02 14:17:51,246 - src.ingestion.hybrid_ingestion_pipeline - INFO - Extracted content length: 1976 characters
2025-08-02 14:17:51,246 - src.ingestion.hybrid_ingestion_pipeline - INFO - Creating KG Builder for ion_propulsion_technology.pdf with from_pdf=True
2025-08-02 14:17:51,350 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x16bea9eb0> with run_params={'schema': {'node_types': ['mission', 'spacecraft', 'rover', 'orbiter', 'lander', '... (22 items)'], 'relationship_types': ['MANAGES', 'OPERATES', 'BUILT', 'LAUNCHED_FROM', 'STUDIES', '... (16 items)'], 'patterns': None}, 'pdf_loader': {'filepath': 'data/documents/ion_propulsion_technology.pdf'}}
2025-08-02 14:17:51,513 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:17:51,673 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:17:51,965 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:17:52,141 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:17:52,311 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:17:57,883 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:17:58,066 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:17:58,174 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:18:02,392 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:18:03,097 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:18:03,397 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` has no effect.} {description: `RANGE INDEX __entity__tmp_internal_id FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` already exists.} {position: None} for query: '\n        CREATE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (n:__KGBuilder__) ON (n.__tmp_internal_id)\n        '
2025-08-02 14:18:04,185 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (end))} {position: line: 1, column: 21, offset: 20} for query: 'UNWIND $rows as row MATCH (start:__KGBuilder__ {__tmp_internal_id: row.start_node_id}),       (end:__KGBuilder__ {__tmp_internal_id: row.end_node_id}) WITH start, end, row CALL apoc.merge.relationship(start, row.type, {}, row.properties, end, row.properties) YIELD rel  WITH rel, row CALL (rel,row) {  WITH rel, row WHERE row.embedding_properties IS NOT NULL UNWIND keys(row.embedding_properties) as emb CALL db.create.setRelationshipVectorProperty(rel, emb, row.embedding_properties[emb]) } RETURN elementId(rel)'
2025-08-02 14:18:08,903 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:18:09,104 - src.rag.pinecone_rag_system - INFO - Deleted 5 existing vectors for document ion_propulsion_technology to prevent duplicates
2025-08-02 14:18:09,244 - src.rag.pinecone_rag_system - INFO - Upserted 5 vectors to Pinecone for ion_propulsion_technology (duplicates removed)
2025-08-02 14:18:09,245 - src.rag.pinecone_rag_system - INFO - Successfully added document ion_propulsion_technology to Pinecone
2025-08-02 14:18:09,245 - src.ingestion.hybrid_ingestion_pipeline - INFO - Added document to RAG vector store: 1 estimated chunks
2025-08-02 14:18:09,246 - src.ingestion.hybrid_ingestion_pipeline - INFO - Neo4j processing completed: added to KG, 1 RAG chunks
2025-08-02 14:36:27,481 - src.models.llm_manager - INFO - OpenAI provider initialized
2025-08-02 14:36:27,507 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-08-02 14:36:27,507 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: sentence-transformers/all-MiniLM-L6-v2
2025-08-02 14:36:28,891 - src.kb.fact_store - INFO - Loaded 12 facts from data/kb/facts.json
2025-08-02 14:36:28,895 - src.kb.knowledge_base - INFO - Loaded 12 NASA facts into knowledge base
2025-08-02 14:36:28,912 - neo4j_graphrag.indexes - INFO - Creating vector index named 'text_embeddings'
2025-08-02 14:36:29,455 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX text_embeddings IF NOT EXISTS FOR (e:Chunk) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: toInteger($dimensions), `vector.similarity_function`: $similarity_fn}}` has no effect.} {description: `VECTOR INDEX text_embeddings FOR (e:Chunk) ON (e.embedding)` already exists.} {position: None} for query: 'CREATE VECTOR INDEX $name IF NOT EXISTS FOR (n:Chunk) ON n.embedding OPTIONS { indexConfig: { `vector.dimensions`: toInteger($dimensions), `vector.similarity_function`: $similarity_fn } }'
2025-08-02 14:36:29,498 - src.kg.neo4j_knowledge_graph - INFO - Vector index 'text_embeddings' created successfully
2025-08-02 14:36:29,715 - src.kg.neo4j_knowledge_graph - INFO - GraphRAG initialized successfully
2025-08-02 14:36:29,715 - src.kg.neo4j_knowledge_graph - INFO - Neo4j Knowledge Graph initialized
2025-08-02 14:36:30,235 - src.rag.pinecone_rag_system - INFO - Using existing Pinecone index: nasa-docs
2025-08-02 14:36:30,386 - src.rag.pinecone_rag_system - INFO - Pinecone RAG System initialized
2025-08-02 14:36:30,390 - __main__ - INFO - Pinecone RAG system initialized
2025-08-02 14:36:30,416 - neo4j_graphrag.indexes - INFO - Creating vector index named 'text_embeddings'
2025-08-02 14:36:30,914 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX text_embeddings IF NOT EXISTS FOR (e:Chunk) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: toInteger($dimensions), `vector.similarity_function`: $similarity_fn}}` has no effect.} {description: `VECTOR INDEX text_embeddings FOR (e:Chunk) ON (e.embedding)` already exists.} {position: None} for query: 'CREATE VECTOR INDEX $name IF NOT EXISTS FOR (n:Chunk) ON n.embedding OPTIONS { indexConfig: { `vector.dimensions`: toInteger($dimensions), `vector.similarity_function`: $similarity_fn } }'
2025-08-02 14:36:30,960 - src.ingestion.hybrid_ingestion_pipeline - INFO - Vector index 'text_embeddings' created successfully
2025-08-02 14:36:30,968 - src.models.llm_manager - INFO - OpenAI provider initialized
2025-08-02 14:36:31,191 - src.rag.pinecone_rag_system - INFO - Using existing Pinecone index: nasa-docs
2025-08-02 14:36:31,192 - src.rag.pinecone_rag_system - INFO - Pinecone RAG System initialized
2025-08-02 14:36:31,192 - src.ingestion.hybrid_ingestion_pipeline - INFO - Pinecone RAG system initialized for hybrid ingestion
2025-08-02 14:36:31,193 - src.ingestion.hybrid_ingestion_pipeline - INFO - Document processor initialized
2025-08-02 14:36:31,193 - src.ingestion.hybrid_ingestion_pipeline - INFO - No existing file metadata found
2025-08-02 14:36:31,193 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: apollo_mission.txt
2025-08-02 14:36:31,193 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: nasa_mars_exploration.pdf
2025-08-02 14:36:31,193 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: exoplanet_detection_methods.pdf
2025-08-02 14:36:31,193 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: hubble_space_telescope.pdf
2025-08-02 14:36:31,194 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: voyager_program.pdf
2025-08-02 14:36:31,194 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: nasa_initial_knowledge.pdf
2025-08-02 14:36:31,194 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: ion_propulsion_technology.pdf
2025-08-02 14:36:31,194 - src.ingestion.hybrid_ingestion_pipeline - INFO - Found 7 files to process in batches of 3
2025-08-02 14:36:31,194 - src.ingestion.hybrid_ingestion_pipeline - INFO - Skipping 0 unchanged files
2025-08-02 14:36:31,194 - src.ingestion.hybrid_ingestion_pipeline - INFO - Processing batch 1/3 (3 files)
2025-08-02 14:36:31,209 - src.ingestion.hybrid_ingestion_pipeline - INFO - Creating KG Builder for apollo_mission.txt with from_pdf=False
2025-08-02 14:36:31,309 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x3094834d0> with run_params={'schema': {'node_types': ['mission', 'spacecraft', 'rover', 'orbiter', 'lander', '... (22 items)'], 'relationship_types': ['MANAGES', 'OPERATES', 'BUILT', 'LAUNCHED_FROM', 'STUDIES', '... (16 items)'], 'patterns': None}, 'splitter': {'text': 'Apollo 11 Mission\n\nThe Apollo 11 mission was the first human spaceflight to land on the Moon. Launched on July 16, 1969 from Kennedy Space Center, the mission was managed by NASA and involved three as... (1359 chars)'}}
2025-08-02 14:36:31,310 - src.ingestion.hybrid_ingestion_pipeline - INFO - Creating KG Builder for nasa_mars_exploration.pdf with from_pdf=True
2025-08-02 14:36:31,405 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x3094a8ef0> with run_params={'schema': {'node_types': ['mission', 'spacecraft', 'rover', 'orbiter', 'lander', '... (22 items)'], 'relationship_types': ['MANAGES', 'OPERATES', 'BUILT', 'LAUNCHED_FROM', 'STUDIES', '... (16 items)'], 'patterns': None}, 'pdf_loader': {'filepath': 'data/documents/nasa_mars_exploration.pdf'}}
2025-08-02 14:36:31,405 - src.ingestion.hybrid_ingestion_pipeline - INFO - Creating KG Builder for exoplanet_detection_methods.pdf with from_pdf=True
2025-08-02 14:36:31,503 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x309483950> with run_params={'schema': {'node_types': ['mission', 'spacecraft', 'rover', 'orbiter', 'lander', '... (22 items)'], 'relationship_types': ['MANAGES', 'OPERATES', 'BUILT', 'LAUNCHED_FROM', 'STUDIES', '... (16 items)'], 'patterns': None}, 'pdf_loader': {'filepath': 'data/documents/exoplanet_detection_methods.pdf'}}
2025-08-02 14:36:31,952 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:36:32,162 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:36:32,345 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:36:32,626 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:36:32,632 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2025-08-02 14:36:32,973 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:36:33,146 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:36:33,335 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:36:33,690 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:36:33,919 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:36:34,097 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:36:34,407 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:36:34,586 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:36:34,767 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:36:37,878 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:36:38,134 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:36:38,418 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:36:39,427 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:36:39,551 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:36:39,733 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:36:40,244 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:36:40,552 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:36:40,556 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:36:40,857 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:36:40,978 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` has no effect.} {description: `RANGE INDEX __entity__tmp_internal_id FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` already exists.} {position: None} for query: '\n        CREATE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (n:__KGBuilder__) ON (n.__tmp_internal_id)\n        '
2025-08-02 14:36:41,915 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (end))} {position: line: 1, column: 21, offset: 20} for query: 'UNWIND $rows as row MATCH (start:__KGBuilder__ {__tmp_internal_id: row.start_node_id}),       (end:__KGBuilder__ {__tmp_internal_id: row.end_node_id}) WITH start, end, row CALL apoc.merge.relationship(start, row.type, {}, row.properties, end, row.properties) YIELD rel  WITH rel, row CALL (rel,row) {  WITH rel, row WHERE row.embedding_properties IS NOT NULL UNWIND keys(row.embedding_properties) as emb CALL db.create.setRelationshipVectorProperty(rel, emb, row.embedding_properties[emb]) } RETURN elementId(rel)'
2025-08-02 14:36:42,406 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:36:42,467 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` has no effect.} {description: `RANGE INDEX __entity__tmp_internal_id FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` already exists.} {position: None} for query: '\n        CREATE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (n:__KGBuilder__) ON (n.__tmp_internal_id)\n        '
2025-08-02 14:36:43,033 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (end))} {position: line: 1, column: 21, offset: 20} for query: 'UNWIND $rows as row MATCH (start:__KGBuilder__ {__tmp_internal_id: row.start_node_id}),       (end:__KGBuilder__ {__tmp_internal_id: row.end_node_id}) WITH start, end, row CALL apoc.merge.relationship(start, row.type, {}, row.properties, end, row.properties) YIELD rel  WITH rel, row CALL (rel,row) {  WITH rel, row WHERE row.embedding_properties IS NOT NULL UNWIND keys(row.embedding_properties) as emb CALL db.create.setRelationshipVectorProperty(rel, emb, row.embedding_properties[emb]) } RETURN elementId(rel)'
2025-08-02 14:36:43,486 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:36:45,042 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:36:45,107 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` has no effect.} {description: `RANGE INDEX __entity__tmp_internal_id FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` already exists.} {position: None} for query: '\n        CREATE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (n:__KGBuilder__) ON (n.__tmp_internal_id)\n        '
2025-08-02 14:36:45,644 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (end))} {position: line: 1, column: 21, offset: 20} for query: 'UNWIND $rows as row MATCH (start:__KGBuilder__ {__tmp_internal_id: row.start_node_id}),       (end:__KGBuilder__ {__tmp_internal_id: row.end_node_id}) WITH start, end, row CALL apoc.merge.relationship(start, row.type, {}, row.properties, end, row.properties) YIELD rel  WITH rel, row CALL (rel,row) {  WITH rel, row WHERE row.embedding_properties IS NOT NULL UNWIND keys(row.embedding_properties) as emb CALL db.create.setRelationshipVectorProperty(rel, emb, row.embedding_properties[emb]) } RETURN elementId(rel)'
2025-08-02 14:36:45,997 - src.rag.pinecone_rag_system - ERROR - Failed to split documents: 'dict' object has no attribute 'page_content'
2025-08-02 14:36:45,998 - src.ingestion.hybrid_ingestion_pipeline - ERROR - Batch RAG upsert failed: 'dict' object has no attribute 'page_content'
2025-08-02 14:38:07,810 - src.models.llm_manager - INFO - OpenAI provider initialized
2025-08-02 14:38:07,819 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-08-02 14:38:07,819 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: sentence-transformers/all-MiniLM-L6-v2
2025-08-02 14:38:09,435 - src.kb.fact_store - INFO - Loaded 12 facts from data/kb/facts.json
2025-08-02 14:38:09,437 - src.kb.knowledge_base - INFO - Loaded 12 NASA facts into knowledge base
2025-08-02 14:38:09,448 - neo4j_graphrag.indexes - INFO - Creating vector index named 'text_embeddings'
2025-08-02 14:38:09,996 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX text_embeddings IF NOT EXISTS FOR (e:Chunk) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: toInteger($dimensions), `vector.similarity_function`: $similarity_fn}}` has no effect.} {description: `VECTOR INDEX text_embeddings FOR (e:Chunk) ON (e.embedding)` already exists.} {position: None} for query: 'CREATE VECTOR INDEX $name IF NOT EXISTS FOR (n:Chunk) ON n.embedding OPTIONS { indexConfig: { `vector.dimensions`: toInteger($dimensions), `vector.similarity_function`: $similarity_fn } }'
2025-08-02 14:38:10,042 - src.kg.neo4j_knowledge_graph - INFO - Vector index 'text_embeddings' created successfully
2025-08-02 14:38:10,267 - src.kg.neo4j_knowledge_graph - INFO - GraphRAG initialized successfully
2025-08-02 14:38:10,267 - src.kg.neo4j_knowledge_graph - INFO - Neo4j Knowledge Graph initialized
2025-08-02 14:38:10,973 - src.rag.pinecone_rag_system - INFO - Using existing Pinecone index: nasa-docs
2025-08-02 14:38:11,100 - src.rag.pinecone_rag_system - INFO - Pinecone RAG System initialized
2025-08-02 14:38:11,101 - __main__ - INFO - Pinecone RAG system initialized
2025-08-02 14:38:11,126 - neo4j_graphrag.indexes - INFO - Creating vector index named 'text_embeddings'
2025-08-02 14:38:11,649 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX text_embeddings IF NOT EXISTS FOR (e:Chunk) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: toInteger($dimensions), `vector.similarity_function`: $similarity_fn}}` has no effect.} {description: `VECTOR INDEX text_embeddings FOR (e:Chunk) ON (e.embedding)` already exists.} {position: None} for query: 'CREATE VECTOR INDEX $name IF NOT EXISTS FOR (n:Chunk) ON n.embedding OPTIONS { indexConfig: { `vector.dimensions`: toInteger($dimensions), `vector.similarity_function`: $similarity_fn } }'
2025-08-02 14:38:11,692 - src.ingestion.hybrid_ingestion_pipeline - INFO - Vector index 'text_embeddings' created successfully
2025-08-02 14:38:11,703 - src.models.llm_manager - INFO - OpenAI provider initialized
2025-08-02 14:38:11,904 - src.rag.pinecone_rag_system - INFO - Using existing Pinecone index: nasa-docs
2025-08-02 14:38:11,905 - src.rag.pinecone_rag_system - INFO - Pinecone RAG System initialized
2025-08-02 14:38:11,905 - src.ingestion.hybrid_ingestion_pipeline - INFO - Pinecone RAG system initialized for hybrid ingestion
2025-08-02 14:38:11,905 - src.ingestion.hybrid_ingestion_pipeline - INFO - Document processor initialized
2025-08-02 14:38:11,905 - src.ingestion.hybrid_ingestion_pipeline - INFO - No existing file metadata found
2025-08-02 14:38:11,906 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: apollo_mission.txt
2025-08-02 14:38:11,906 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: nasa_mars_exploration.pdf
2025-08-02 14:38:11,906 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: exoplanet_detection_methods.pdf
2025-08-02 14:38:11,906 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: hubble_space_telescope.pdf
2025-08-02 14:38:11,906 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: voyager_program.pdf
2025-08-02 14:38:11,906 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: nasa_initial_knowledge.pdf
2025-08-02 14:38:11,906 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: ion_propulsion_technology.pdf
2025-08-02 14:38:11,907 - src.ingestion.hybrid_ingestion_pipeline - INFO - Found 7 files to process in batches of 3
2025-08-02 14:38:11,907 - src.ingestion.hybrid_ingestion_pipeline - INFO - Skipping 0 unchanged files
2025-08-02 14:38:11,907 - src.ingestion.hybrid_ingestion_pipeline - INFO - Processing batch 1/3 (3 files)
2025-08-02 14:38:11,920 - src.ingestion.hybrid_ingestion_pipeline - INFO - Creating KG Builder for apollo_mission.txt with from_pdf=False
2025-08-02 14:38:12,016 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x16b8881a0> with run_params={'schema': {'node_types': ['mission', 'spacecraft', 'rover', 'orbiter', 'lander', '... (22 items)'], 'relationship_types': ['MANAGES', 'OPERATES', 'BUILT', 'LAUNCHED_FROM', 'STUDIES', '... (16 items)'], 'patterns': None}, 'splitter': {'text': 'Apollo 11 Mission\n\nThe Apollo 11 mission was the first human spaceflight to land on the Moon. Launched on July 16, 1969 from Kennedy Space Center, the mission was managed by NASA and involved three as... (1359 chars)'}}
2025-08-02 14:38:12,017 - src.ingestion.hybrid_ingestion_pipeline - INFO - Creating KG Builder for nasa_mars_exploration.pdf with from_pdf=True
2025-08-02 14:38:12,112 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x16b889700> with run_params={'schema': {'node_types': ['mission', 'spacecraft', 'rover', 'orbiter', 'lander', '... (22 items)'], 'relationship_types': ['MANAGES', 'OPERATES', 'BUILT', 'LAUNCHED_FROM', 'STUDIES', '... (16 items)'], 'patterns': None}, 'pdf_loader': {'filepath': 'data/documents/nasa_mars_exploration.pdf'}}
2025-08-02 14:38:12,112 - src.ingestion.hybrid_ingestion_pipeline - INFO - Creating KG Builder for exoplanet_detection_methods.pdf with from_pdf=True
2025-08-02 14:38:12,207 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x16b889880> with run_params={'schema': {'node_types': ['mission', 'spacecraft', 'rover', 'orbiter', 'lander', '... (22 items)'], 'relationship_types': ['MANAGES', 'OPERATES', 'BUILT', 'LAUNCHED_FROM', 'STUDIES', '... (16 items)'], 'patterns': None}, 'pdf_loader': {'filepath': 'data/documents/exoplanet_detection_methods.pdf'}}
2025-08-02 14:38:12,583 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:12,888 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:13,078 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:13,257 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:13,261 - neo4j_graphrag.experimental.components.lexical_graph - INFO - Document node not created in the lexical graph because no document metadata is provided
2025-08-02 14:38:13,452 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:13,660 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:14,044 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:14,162 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:14,555 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:14,729 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:14,869 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:15,100 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:15,391 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:18,722 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:38:18,930 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:38:19,681 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:38:19,867 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:38:20,312 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:38:21,022 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:38:21,094 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` has no effect.} {description: `RANGE INDEX __entity__tmp_internal_id FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` already exists.} {position: None} for query: '\n        CREATE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (n:__KGBuilder__) ON (n.__tmp_internal_id)\n        '
2025-08-02 14:38:21,872 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (end))} {position: line: 1, column: 21, offset: 20} for query: 'UNWIND $rows as row MATCH (start:__KGBuilder__ {__tmp_internal_id: row.start_node_id}),       (end:__KGBuilder__ {__tmp_internal_id: row.end_node_id}) WITH start, end, row CALL apoc.merge.relationship(start, row.type, {}, row.properties, end, row.properties) YIELD rel  WITH rel, row CALL (rel,row) {  WITH rel, row WHERE row.embedding_properties IS NOT NULL UNWIND keys(row.embedding_properties) as emb CALL db.create.setRelationshipVectorProperty(rel, emb, row.embedding_properties[emb]) } RETURN elementId(rel)'
2025-08-02 14:38:22,261 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:38:22,263 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:38:22,266 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:38:22,267 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:38:22,268 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:38:22,328 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` has no effect.} {description: `RANGE INDEX __entity__tmp_internal_id FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` already exists.} {position: None} for query: '\n        CREATE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (n:__KGBuilder__) ON (n.__tmp_internal_id)\n        '
2025-08-02 14:38:22,954 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (end))} {position: line: 1, column: 21, offset: 20} for query: 'UNWIND $rows as row MATCH (start:__KGBuilder__ {__tmp_internal_id: row.start_node_id}),       (end:__KGBuilder__ {__tmp_internal_id: row.end_node_id}) WITH start, end, row CALL apoc.merge.relationship(start, row.type, {}, row.properties, end, row.properties) YIELD rel  WITH rel, row CALL (rel,row) {  WITH rel, row WHERE row.embedding_properties IS NOT NULL UNWIND keys(row.embedding_properties) as emb CALL db.create.setRelationshipVectorProperty(rel, emb, row.embedding_properties[emb]) } RETURN elementId(rel)'
2025-08-02 14:38:24,489 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:38:25,302 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:38:25,365 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` has no effect.} {description: `RANGE INDEX __entity__tmp_internal_id FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` already exists.} {position: None} for query: '\n        CREATE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (n:__KGBuilder__) ON (n.__tmp_internal_id)\n        '
2025-08-02 14:38:25,819 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (end))} {position: line: 1, column: 21, offset: 20} for query: 'UNWIND $rows as row MATCH (start:__KGBuilder__ {__tmp_internal_id: row.start_node_id}),       (end:__KGBuilder__ {__tmp_internal_id: row.end_node_id}) WITH start, end, row CALL apoc.merge.relationship(start, row.type, {}, row.properties, end, row.properties) YIELD rel  WITH rel, row CALL (rel,row) {  WITH rel, row WHERE row.embedding_properties IS NOT NULL UNWIND keys(row.embedding_properties) as emb CALL db.create.setRelationshipVectorProperty(rel, emb, row.embedding_properties[emb]) } RETURN elementId(rel)'
2025-08-02 14:38:26,490 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:26,762 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:27,047 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:27,479 - src.ingestion.hybrid_ingestion_pipeline - INFO - Batch upserted 14 vectors for 3 files
2025-08-02 14:38:27,480 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: apollo_mission.txt
2025-08-02 14:38:27,482 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: nasa_mars_exploration.pdf
2025-08-02 14:38:27,482 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: exoplanet_detection_methods.pdf
2025-08-02 14:38:27,483 - src.ingestion.hybrid_ingestion_pipeline - INFO - Completed batch 1/3
2025-08-02 14:38:27,483 - src.ingestion.hybrid_ingestion_pipeline - INFO - Processing batch 2/3 (3 files)
2025-08-02 14:38:27,499 - src.ingestion.hybrid_ingestion_pipeline - INFO - Creating KG Builder for hubble_space_telescope.pdf with from_pdf=True
2025-08-02 14:38:27,595 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x13ba23ec0> with run_params={'schema': {'node_types': ['mission', 'spacecraft', 'rover', 'orbiter', 'lander', '... (22 items)'], 'relationship_types': ['MANAGES', 'OPERATES', 'BUILT', 'LAUNCHED_FROM', 'STUDIES', '... (16 items)'], 'patterns': None}, 'pdf_loader': {'filepath': 'data/documents/hubble_space_telescope.pdf'}}
2025-08-02 14:38:27,596 - src.ingestion.hybrid_ingestion_pipeline - INFO - Creating KG Builder for voyager_program.pdf with from_pdf=True
2025-08-02 14:38:27,690 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x13ba3c230> with run_params={'schema': {'node_types': ['mission', 'spacecraft', 'rover', 'orbiter', 'lander', '... (22 items)'], 'relationship_types': ['MANAGES', 'OPERATES', 'BUILT', 'LAUNCHED_FROM', 'STUDIES', '... (16 items)'], 'patterns': None}, 'pdf_loader': {'filepath': 'data/documents/voyager_program.pdf'}}
2025-08-02 14:38:27,691 - src.ingestion.hybrid_ingestion_pipeline - INFO - Creating KG Builder for nasa_initial_knowledge.pdf with from_pdf=True
2025-08-02 14:38:27,783 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x13ba23fb0> with run_params={'schema': {'node_types': ['mission', 'spacecraft', 'rover', 'orbiter', 'lander', '... (22 items)'], 'relationship_types': ['MANAGES', 'OPERATES', 'BUILT', 'LAUNCHED_FROM', 'STUDIES', '... (16 items)'], 'patterns': None}, 'pdf_loader': {'filepath': 'data/documents/nasa_initial_knowledge.pdf'}}
2025-08-02 14:38:28,026 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:28,177 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:28,325 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:28,477 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:28,739 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:28,937 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:29,109 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:29,242 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:29,378 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:29,530 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:30,082 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:38:30,137 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` has no effect.} {description: `RANGE INDEX __entity__tmp_internal_id FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` already exists.} {position: None} for query: '\n        CREATE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (n:__KGBuilder__) ON (n.__tmp_internal_id)\n        '
2025-08-02 14:38:30,513 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (end))} {position: line: 1, column: 21, offset: 20} for query: 'UNWIND $rows as row MATCH (start:__KGBuilder__ {__tmp_internal_id: row.start_node_id}),       (end:__KGBuilder__ {__tmp_internal_id: row.end_node_id}) WITH start, end, row CALL apoc.merge.relationship(start, row.type, {}, row.properties, end, row.properties) YIELD rel  WITH rel, row CALL (rel,row) {  WITH rel, row WHERE row.embedding_properties IS NOT NULL UNWIND keys(row.embedding_properties) as emb CALL db.create.setRelationshipVectorProperty(rel, emb, row.embedding_properties[emb]) } RETURN elementId(rel)'
2025-08-02 14:38:34,260 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:38:35,265 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:38:35,906 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:38:36,157 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:38:36,282 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:38:36,674 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:38:37,743 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:38:39,075 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:38:39,380 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` has no effect.} {description: `RANGE INDEX __entity__tmp_internal_id FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` already exists.} {position: None} for query: '\n        CREATE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (n:__KGBuilder__) ON (n.__tmp_internal_id)\n        '
2025-08-02 14:38:39,984 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (end))} {position: line: 1, column: 21, offset: 20} for query: 'UNWIND $rows as row MATCH (start:__KGBuilder__ {__tmp_internal_id: row.start_node_id}),       (end:__KGBuilder__ {__tmp_internal_id: row.end_node_id}) WITH start, end, row CALL apoc.merge.relationship(start, row.type, {}, row.properties, end, row.properties) YIELD rel  WITH rel, row CALL (rel,row) {  WITH rel, row WHERE row.embedding_properties IS NOT NULL UNWIND keys(row.embedding_properties) as emb CALL db.create.setRelationshipVectorProperty(rel, emb, row.embedding_properties[emb]) } RETURN elementId(rel)'
2025-08-02 14:38:40,403 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:38:40,492 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` has no effect.} {description: `RANGE INDEX __entity__tmp_internal_id FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` already exists.} {position: None} for query: '\n        CREATE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (n:__KGBuilder__) ON (n.__tmp_internal_id)\n        '
2025-08-02 14:38:41,039 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (end))} {position: line: 1, column: 21, offset: 20} for query: 'UNWIND $rows as row MATCH (start:__KGBuilder__ {__tmp_internal_id: row.start_node_id}),       (end:__KGBuilder__ {__tmp_internal_id: row.end_node_id}) WITH start, end, row CALL apoc.merge.relationship(start, row.type, {}, row.properties, end, row.properties) YIELD rel  WITH rel, row CALL (rel,row) {  WITH rel, row WHERE row.embedding_properties IS NOT NULL UNWIND keys(row.embedding_properties) as emb CALL db.create.setRelationshipVectorProperty(rel, emb, row.embedding_properties[emb]) } RETURN elementId(rel)'
2025-08-02 14:38:41,651 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:42,073 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:42,390 - src.ingestion.hybrid_ingestion_pipeline - INFO - Batch upserted 9 vectors for 3 files
2025-08-02 14:38:42,391 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: hubble_space_telescope.pdf
2025-08-02 14:38:42,392 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: voyager_program.pdf
2025-08-02 14:38:42,392 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: nasa_initial_knowledge.pdf
2025-08-02 14:38:42,393 - src.ingestion.hybrid_ingestion_pipeline - INFO - Completed batch 2/3
2025-08-02 14:38:42,393 - src.ingestion.hybrid_ingestion_pipeline - INFO - Processing batch 3/3 (1 files)
2025-08-02 14:38:42,401 - src.ingestion.hybrid_ingestion_pipeline - INFO - Creating KG Builder for ion_propulsion_technology.pdf with from_pdf=True
2025-08-02 14:38:42,501 - neo4j_graphrag.experimental.pipeline.config.runner - INFO - PIPELINE_RUNNER: starting pipeline <neo4j_graphrag.experimental.pipeline.pipeline.Pipeline object at 0x13ba225d0> with run_params={'schema': {'node_types': ['mission', 'spacecraft', 'rover', 'orbiter', 'lander', '... (22 items)'], 'relationship_types': ['MANAGES', 'OPERATES', 'BUILT', 'LAUNCHED_FROM', 'STUDIES', '... (16 items)'], 'patterns': None}, 'pdf_loader': {'filepath': 'data/documents/ion_propulsion_technology.pdf'}}
2025-08-02 14:38:44,323 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:44,536 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:44,699 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:44,851 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:45,002 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:38:45,128 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-08-02 14:38:45,129 - openai._base_client - INFO - Retrying request to /chat/completions in 3.442000 seconds
2025-08-02 14:38:45,200 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-08-02 14:38:45,201 - openai._base_client - INFO - Retrying request to /chat/completions in 3.438000 seconds
2025-08-02 14:38:45,209 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-08-02 14:38:45,209 - openai._base_client - INFO - Retrying request to /chat/completions in 3.442000 seconds
2025-08-02 14:38:45,212 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-08-02 14:38:45,212 - openai._base_client - INFO - Retrying request to /chat/completions in 3.382000 seconds
2025-08-02 14:38:45,236 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-08-02 14:38:45,237 - openai._base_client - INFO - Retrying request to /chat/completions in 3.442000 seconds
2025-08-02 14:38:48,716 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-08-02 14:38:48,717 - openai._base_client - INFO - Retrying request to /chat/completions in 0.176000 seconds
2025-08-02 14:38:48,756 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-08-02 14:38:48,756 - openai._base_client - INFO - Retrying request to /chat/completions in 0.084000 seconds
2025-08-02 14:38:48,790 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-08-02 14:38:48,790 - openai._base_client - INFO - Retrying request to /chat/completions in 0.104000 seconds
2025-08-02 14:38:48,806 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-08-02 14:38:48,807 - openai._base_client - INFO - Retrying request to /chat/completions in 0.078000 seconds
2025-08-02 14:38:48,819 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-08-02 14:38:48,820 - openai._base_client - INFO - Retrying request to /chat/completions in 0.078000 seconds
2025-08-02 14:38:49,169 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-08-02 14:38:49,170 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-08-02 14:38:49,172 - neo4j_graphrag.llm.rate_limit - WARNING - Retrying neo4j_graphrag.llm.rate_limit.async_rate_limit_handler.<locals>.wrapper.<locals>.inner_func in 1.3088242559992431 seconds as it raised RateLimitError: Rate limit exceeded: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4o in organization org-axLpRpkHUTlYjeHu1tjihUEv on tokens per min (TPM): Limit 30000, Used 29865, Requested 1691. Please try again in 3.112s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}.
2025-08-02 14:38:49,173 - neo4j_graphrag.llm.rate_limit - WARNING - Retrying neo4j_graphrag.llm.rate_limit.async_rate_limit_handler.<locals>.wrapper.<locals>.inner_func in 1.3402215565590037 seconds as it raised RateLimitError: Rate limit exceeded: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4o in organization org-axLpRpkHUTlYjeHu1tjihUEv on tokens per min (TPM): Limit 30000, Used 30000, Requested 1721. Please try again in 3.442s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}.
2025-08-02 14:38:50,618 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-08-02 14:38:50,619 - openai._base_client - INFO - Retrying request to /chat/completions in 3.382000 seconds
2025-08-02 14:38:50,646 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-08-02 14:38:50,647 - openai._base_client - INFO - Retrying request to /chat/completions in 3.442000 seconds
2025-08-02 14:38:52,898 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:38:52,980 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:38:54,140 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-08-02 14:38:54,141 - openai._base_client - INFO - Retrying request to /chat/completions in 3.382000 seconds
2025-08-02 14:38:54,230 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-08-02 14:38:54,231 - openai._base_client - INFO - Retrying request to /chat/completions in 3.442000 seconds
2025-08-02 14:38:54,418 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:38:57,673 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-08-02 14:38:57,675 - neo4j_graphrag.llm.rate_limit - WARNING - Retrying neo4j_graphrag.llm.rate_limit.async_rate_limit_handler.<locals>.wrapper.<locals>.inner_func in 1.5726622240452166 seconds as it raised RateLimitError: Rate limit exceeded: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4o in organization org-axLpRpkHUTlYjeHu1tjihUEv on tokens per min (TPM): Limit 30000, Used 29453, Requested 1691. Please try again in 2.288s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}.
2025-08-02 14:38:57,871 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-08-02 14:38:57,873 - neo4j_graphrag.llm.rate_limit - WARNING - Retrying neo4j_graphrag.llm.rate_limit.async_rate_limit_handler.<locals>.wrapper.<locals>.inner_func in 3.3748812826886 seconds as it raised RateLimitError: Rate limit exceeded: Error code: 429 - {'error': {'message': 'Rate limit reached for gpt-4o in organization org-axLpRpkHUTlYjeHu1tjihUEv on tokens per min (TPM): Limit 30000, Used 29378, Requested 1721. Please try again in 2.198s. Visit https://platform.openai.com/account/rate-limits to learn more.', 'type': 'tokens', 'param': None, 'code': 'rate_limit_exceeded'}}.
2025-08-02 14:38:59,383 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-08-02 14:38:59,384 - openai._base_client - INFO - Retrying request to /chat/completions in 0.570000 seconds
2025-08-02 14:39:01,434 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 429 Too Many Requests"
2025-08-02 14:39:01,435 - openai._base_client - INFO - Retrying request to /chat/completions in 1.950000 seconds
2025-08-02 14:39:06,178 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:39:12,533 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 14:39:12,858 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` has no effect.} {description: `RANGE INDEX __entity__tmp_internal_id FOR (e:__KGBuilder__) ON (e.__tmp_internal_id)` already exists.} {position: None} for query: '\n        CREATE INDEX __entity__tmp_internal_id IF NOT EXISTS FOR (n:__KGBuilder__) ON (n.__tmp_internal_id)\n        '
2025-08-02 14:39:13,398 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (end))} {position: line: 1, column: 21, offset: 20} for query: 'UNWIND $rows as row MATCH (start:__KGBuilder__ {__tmp_internal_id: row.start_node_id}),       (end:__KGBuilder__ {__tmp_internal_id: row.end_node_id}) WITH start, end, row CALL apoc.merge.relationship(start, row.type, {}, row.properties, end, row.properties) YIELD rel  WITH rel, row CALL (rel,row) {  WITH rel, row WHERE row.embedding_properties IS NOT NULL UNWIND keys(row.embedding_properties) as emb CALL db.create.setRelationshipVectorProperty(rel, emb, row.embedding_properties[emb]) } RETURN elementId(rel)'
2025-08-02 14:39:14,152 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 14:39:14,390 - src.ingestion.hybrid_ingestion_pipeline - INFO - Batch upserted 5 vectors for 1 files
2025-08-02 14:39:14,390 - src.ingestion.hybrid_ingestion_pipeline - INFO - New file detected: ion_propulsion_technology.pdf
2025-08-02 14:39:14,392 - src.ingestion.hybrid_ingestion_pipeline - INFO - Completed batch 3/3
2025-08-02 15:24:53,937 - src.models.llm_manager - INFO - OpenAI provider initialized
2025-08-02 15:24:53,947 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-08-02 15:24:53,947 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: sentence-transformers/all-MiniLM-L6-v2
2025-08-02 15:24:55,935 - src.kb.fact_store - INFO - Loaded 12 facts from data/kb/facts.json
2025-08-02 15:24:55,940 - src.kb.knowledge_base - INFO - Loaded 12 NASA facts into knowledge base
2025-08-02 15:24:56,017 - neo4j_graphrag.indexes - INFO - Creating vector index named 'text_embeddings'
2025-08-02 15:24:56,687 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX text_embeddings IF NOT EXISTS FOR (e:Chunk) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: toInteger($dimensions), `vector.similarity_function`: $similarity_fn}}` has no effect.} {description: `VECTOR INDEX text_embeddings FOR (e:Chunk) ON (e.embedding)` already exists.} {position: None} for query: 'CREATE VECTOR INDEX $name IF NOT EXISTS FOR (n:Chunk) ON n.embedding OPTIONS { indexConfig: { `vector.dimensions`: toInteger($dimensions), `vector.similarity_function`: $similarity_fn } }'
2025-08-02 15:24:56,739 - src.kg.neo4j_knowledge_graph - INFO - Vector index 'text_embeddings' created successfully
2025-08-02 15:24:57,012 - src.kg.neo4j_knowledge_graph - INFO - GraphRAG initialized successfully
2025-08-02 15:24:57,012 - src.kg.neo4j_knowledge_graph - INFO - Neo4j Knowledge Graph initialized
2025-08-02 15:24:57,754 - src.rag.pinecone_rag_system - INFO - Using existing Pinecone index: nasa-docs
2025-08-02 15:24:57,926 - src.rag.pinecone_rag_system - INFO - Pinecone RAG System initialized
2025-08-02 15:24:57,927 - __main__ - INFO - Pinecone RAG system initialized
2025-08-02 15:24:57,955 - neo4j_graphrag.indexes - INFO - Creating vector index named 'text_embeddings'
2025-08-02 15:24:58,452 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX text_embeddings IF NOT EXISTS FOR (e:Chunk) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: toInteger($dimensions), `vector.similarity_function`: $similarity_fn}}` has no effect.} {description: `VECTOR INDEX text_embeddings FOR (e:Chunk) ON (e.embedding)` already exists.} {position: None} for query: 'CREATE VECTOR INDEX $name IF NOT EXISTS FOR (n:Chunk) ON n.embedding OPTIONS { indexConfig: { `vector.dimensions`: toInteger($dimensions), `vector.similarity_function`: $similarity_fn } }'
2025-08-02 15:24:58,495 - src.ingestion.hybrid_ingestion_pipeline - INFO - Vector index 'text_embeddings' created successfully
2025-08-02 15:24:58,504 - src.models.llm_manager - INFO - OpenAI provider initialized
2025-08-02 15:24:58,728 - src.rag.pinecone_rag_system - INFO - Using existing Pinecone index: nasa-docs
2025-08-02 15:24:58,730 - src.rag.pinecone_rag_system - INFO - Pinecone RAG System initialized
2025-08-02 15:24:58,730 - src.ingestion.hybrid_ingestion_pipeline - INFO - Pinecone RAG system initialized for hybrid ingestion
2025-08-02 15:24:58,730 - src.ingestion.hybrid_ingestion_pipeline - INFO - Document processor initialized
2025-08-02 15:24:58,731 - src.ingestion.hybrid_ingestion_pipeline - INFO - Loaded metadata for 7 files
2025-08-02 15:24:58,736 - src.router.query_router - INFO - Routing query: Explain how NASA studies exoplanets
2025-08-02 15:25:00,775 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 15:25:00,795 - src.rag.pinecone_rag_system - INFO - Pinecone RAG Query: Explain how NASA studies exoplanets
2025-08-02 15:25:01,298 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 15:25:01,937 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 15:25:02,212 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 15:25:02,502 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 15:25:02,697 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 15:25:02,847 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 15:25:03,025 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 15:25:03,209 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 15:25:03,673 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 15:25:03,920 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 15:25:04,078 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 15:25:08,710 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 15:27:40,041 - src.models.llm_manager - INFO - OpenAI provider initialized
2025-08-02 15:27:40,062 - sentence_transformers.SentenceTransformer - INFO - Use pytorch device_name: mps
2025-08-02 15:27:40,062 - sentence_transformers.SentenceTransformer - INFO - Load pretrained SentenceTransformer: sentence-transformers/all-MiniLM-L6-v2
2025-08-02 15:27:41,423 - src.kb.fact_store - INFO - Loaded 12 facts from data/kb/facts.json
2025-08-02 15:27:41,425 - src.kb.knowledge_base - INFO - Loaded 12 NASA facts into knowledge base
2025-08-02 15:27:41,440 - neo4j_graphrag.indexes - INFO - Creating vector index named 'text_embeddings'
2025-08-02 15:27:41,991 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX text_embeddings IF NOT EXISTS FOR (e:Chunk) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: toInteger($dimensions), `vector.similarity_function`: $similarity_fn}}` has no effect.} {description: `VECTOR INDEX text_embeddings FOR (e:Chunk) ON (e.embedding)` already exists.} {position: None} for query: 'CREATE VECTOR INDEX $name IF NOT EXISTS FOR (n:Chunk) ON n.embedding OPTIONS { indexConfig: { `vector.dimensions`: toInteger($dimensions), `vector.similarity_function`: $similarity_fn } }'
2025-08-02 15:27:42,038 - src.kg.neo4j_knowledge_graph - INFO - Vector index 'text_embeddings' created successfully
2025-08-02 15:27:42,310 - src.kg.neo4j_knowledge_graph - INFO - GraphRAG initialized successfully
2025-08-02 15:27:42,311 - src.kg.neo4j_knowledge_graph - INFO - Neo4j Knowledge Graph initialized
2025-08-02 15:27:42,744 - src.rag.pinecone_rag_system - INFO - Using existing Pinecone index: nasa-docs
2025-08-02 15:27:42,917 - src.rag.pinecone_rag_system - INFO - Pinecone RAG System initialized
2025-08-02 15:27:42,917 - __main__ - INFO - Pinecone RAG system initialized
2025-08-02 15:27:42,948 - neo4j_graphrag.indexes - INFO - Creating vector index named 'text_embeddings'
2025-08-02 15:27:43,455 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX text_embeddings IF NOT EXISTS FOR (e:Chunk) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: toInteger($dimensions), `vector.similarity_function`: $similarity_fn}}` has no effect.} {description: `VECTOR INDEX text_embeddings FOR (e:Chunk) ON (e.embedding)` already exists.} {position: None} for query: 'CREATE VECTOR INDEX $name IF NOT EXISTS FOR (n:Chunk) ON n.embedding OPTIONS { indexConfig: { `vector.dimensions`: toInteger($dimensions), `vector.similarity_function`: $similarity_fn } }'
2025-08-02 15:27:43,502 - src.ingestion.hybrid_ingestion_pipeline - INFO - Vector index 'text_embeddings' created successfully
2025-08-02 15:27:43,510 - src.models.llm_manager - INFO - OpenAI provider initialized
2025-08-02 15:27:43,712 - src.rag.pinecone_rag_system - INFO - Using existing Pinecone index: nasa-docs
2025-08-02 15:27:43,713 - src.rag.pinecone_rag_system - INFO - Pinecone RAG System initialized
2025-08-02 15:27:43,714 - src.ingestion.hybrid_ingestion_pipeline - INFO - Pinecone RAG system initialized for hybrid ingestion
2025-08-02 15:27:43,714 - src.ingestion.hybrid_ingestion_pipeline - INFO - Document processor initialized
2025-08-02 15:27:43,715 - src.ingestion.hybrid_ingestion_pipeline - INFO - Loaded metadata for 7 files
2025-08-02 15:27:43,720 - src.router.query_router - INFO - Routing query: Describe the challenges of Mars exploration
2025-08-02 15:27:45,463 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2025-08-02 15:27:45,470 - src.rag.pinecone_rag_system - INFO - Pinecone RAG Query: Describe the challenges of Mars exploration
2025-08-02 15:27:45,718 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 15:27:46,284 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 15:27:46,437 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 15:27:46,896 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 15:27:47,103 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 15:27:47,408 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 15:27:47,715 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 15:27:47,842 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 15:27:48,011 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 15:27:48,163 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 15:27:48,310 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/embeddings "HTTP/1.1 200 OK"
2025-08-02 15:27:49,175 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
